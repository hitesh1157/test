/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.matching.Item', null, global);
goog.exportSymbol('proto.matching.ItemMatch', null, global);
goog.exportSymbol('proto.matching.ItemMatchesResponse', null, global);
goog.exportSymbol('proto.matching.MatchesRequest', null, global);
goog.exportSymbol('proto.matching.PartUserData', null, global);
goog.exportSymbol('proto.matching.TravelPlan', null, global);
goog.exportSymbol('proto.matching.TravelPlanMatch', null, global);
goog.exportSymbol('proto.matching.TravelPlanMatchesResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.matching.ItemMatchesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.matching.ItemMatchesResponse.repeatedFields_, null);
};
goog.inherits(proto.matching.ItemMatchesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.matching.ItemMatchesResponse.displayName = 'proto.matching.ItemMatchesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.matching.ItemMatchesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.matching.ItemMatchesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.matching.ItemMatchesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.matching.ItemMatchesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matching.ItemMatchesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemMatchesList: jspb.Message.toObjectList(msg.getItemMatchesList(),
    proto.matching.ItemMatch.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.matching.ItemMatchesResponse}
 */
proto.matching.ItemMatchesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.matching.ItemMatchesResponse;
  return proto.matching.ItemMatchesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.matching.ItemMatchesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.matching.ItemMatchesResponse}
 */
proto.matching.ItemMatchesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.matching.ItemMatch;
      reader.readMessage(value,proto.matching.ItemMatch.deserializeBinaryFromReader);
      msg.addItemMatches(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.matching.ItemMatchesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.matching.ItemMatchesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.matching.ItemMatchesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matching.ItemMatchesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemMatchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.matching.ItemMatch.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ItemMatch item_matches = 1;
 * @return {!Array.<!proto.matching.ItemMatch>}
 */
proto.matching.ItemMatchesResponse.prototype.getItemMatchesList = function() {
  return /** @type{!Array.<!proto.matching.ItemMatch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.matching.ItemMatch, 1));
};


/** @param {!Array.<!proto.matching.ItemMatch>} value */
proto.matching.ItemMatchesResponse.prototype.setItemMatchesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.matching.ItemMatch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.matching.ItemMatch}
 */
proto.matching.ItemMatchesResponse.prototype.addItemMatches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.matching.ItemMatch, opt_index);
};


proto.matching.ItemMatchesResponse.prototype.clearItemMatchesList = function() {
  this.setItemMatchesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.matching.TravelPlanMatchesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.matching.TravelPlanMatchesResponse.repeatedFields_, null);
};
goog.inherits(proto.matching.TravelPlanMatchesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.matching.TravelPlanMatchesResponse.displayName = 'proto.matching.TravelPlanMatchesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.matching.TravelPlanMatchesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.matching.TravelPlanMatchesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.matching.TravelPlanMatchesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.matching.TravelPlanMatchesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matching.TravelPlanMatchesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    travelplanMatchesList: jspb.Message.toObjectList(msg.getTravelplanMatchesList(),
    proto.matching.TravelPlanMatch.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.matching.TravelPlanMatchesResponse}
 */
proto.matching.TravelPlanMatchesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.matching.TravelPlanMatchesResponse;
  return proto.matching.TravelPlanMatchesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.matching.TravelPlanMatchesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.matching.TravelPlanMatchesResponse}
 */
proto.matching.TravelPlanMatchesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.matching.TravelPlanMatch;
      reader.readMessage(value,proto.matching.TravelPlanMatch.deserializeBinaryFromReader);
      msg.addTravelplanMatches(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.matching.TravelPlanMatchesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.matching.TravelPlanMatchesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.matching.TravelPlanMatchesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matching.TravelPlanMatchesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTravelplanMatchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.matching.TravelPlanMatch.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TravelPlanMatch travelplan_matches = 1;
 * @return {!Array.<!proto.matching.TravelPlanMatch>}
 */
proto.matching.TravelPlanMatchesResponse.prototype.getTravelplanMatchesList = function() {
  return /** @type{!Array.<!proto.matching.TravelPlanMatch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.matching.TravelPlanMatch, 1));
};


/** @param {!Array.<!proto.matching.TravelPlanMatch>} value */
proto.matching.TravelPlanMatchesResponse.prototype.setTravelplanMatchesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.matching.TravelPlanMatch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.matching.TravelPlanMatch}
 */
proto.matching.TravelPlanMatchesResponse.prototype.addTravelplanMatches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.matching.TravelPlanMatch, opt_index);
};


proto.matching.TravelPlanMatchesResponse.prototype.clearTravelplanMatchesList = function() {
  this.setTravelplanMatchesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.matching.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.matching.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.matching.Item.displayName = 'proto.matching.Item';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.matching.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.matching.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.matching.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matching.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startLat: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    startLon: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    endLat: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    endLon: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    startAddr: jspb.Message.getFieldWithDefault(msg, 6, ""),
    endAddr: jspb.Message.getFieldWithDefault(msg, 7, ""),
    endTime: jspb.Message.getFieldWithDefault(msg, 8, 0),
    height: jspb.Message.getFieldWithDefault(msg, 9, 0),
    length: jspb.Message.getFieldWithDefault(msg, 11, 0),
    width: jspb.Message.getFieldWithDefault(msg, 12, 0),
    weight: jspb.Message.getFieldWithDefault(msg, 13, 0),
    value: jspb.Message.getFieldWithDefault(msg, 14, 0),
    name: jspb.Message.getFieldWithDefault(msg, 15, ""),
    lengthUnit: jspb.Message.getFieldWithDefault(msg, 16, ""),
    widthUnit: jspb.Message.getFieldWithDefault(msg, 19, ""),
    heightUnit: jspb.Message.getFieldWithDefault(msg, 20, ""),
    weightUnit: jspb.Message.getFieldWithDefault(msg, 17, ""),
    image: jspb.Message.getFieldWithDefault(msg, 18, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.matching.Item}
 */
proto.matching.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.matching.Item;
  return proto.matching.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.matching.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.matching.Item}
 */
proto.matching.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartLat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartLon(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndLat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndLon(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartAddr(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndAddr(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWeight(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setLengthUnit(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setWidthUnit(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeightUnit(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeightUnit(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.matching.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.matching.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.matching.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matching.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartLat();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getStartLon();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getEndLat();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getEndLon();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getStartAddr();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEndAddr();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getLengthUnit();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getWidthUnit();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getHeightUnit();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getWeightUnit();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.matching.Item.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.matching.Item.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double start_lat = 2;
 * @return {number}
 */
proto.matching.Item.prototype.getStartLat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.matching.Item.prototype.setStartLat = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional double start_lon = 3;
 * @return {number}
 */
proto.matching.Item.prototype.getStartLon = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.matching.Item.prototype.setStartLon = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional double end_lat = 4;
 * @return {number}
 */
proto.matching.Item.prototype.getEndLat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.matching.Item.prototype.setEndLat = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double end_lon = 5;
 * @return {number}
 */
proto.matching.Item.prototype.getEndLon = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.matching.Item.prototype.setEndLon = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string start_addr = 6;
 * @return {string}
 */
proto.matching.Item.prototype.getStartAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.matching.Item.prototype.setStartAddr = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string end_addr = 7;
 * @return {string}
 */
proto.matching.Item.prototype.getEndAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.matching.Item.prototype.setEndAddr = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int64 end_time = 8;
 * @return {number}
 */
proto.matching.Item.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.matching.Item.prototype.setEndTime = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int32 height = 9;
 * @return {number}
 */
proto.matching.Item.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.matching.Item.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional int32 length = 11;
 * @return {number}
 */
proto.matching.Item.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.matching.Item.prototype.setLength = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional int32 width = 12;
 * @return {number}
 */
proto.matching.Item.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.matching.Item.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional int32 weight = 13;
 * @return {number}
 */
proto.matching.Item.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.matching.Item.prototype.setWeight = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional int32 value = 14;
 * @return {number}
 */
proto.matching.Item.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.matching.Item.prototype.setValue = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string name = 15;
 * @return {string}
 */
proto.matching.Item.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.matching.Item.prototype.setName = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string length_unit = 16;
 * @return {string}
 */
proto.matching.Item.prototype.getLengthUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.matching.Item.prototype.setLengthUnit = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional string width_unit = 19;
 * @return {string}
 */
proto.matching.Item.prototype.getWidthUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.matching.Item.prototype.setWidthUnit = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional string height_unit = 20;
 * @return {string}
 */
proto.matching.Item.prototype.getHeightUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.matching.Item.prototype.setHeightUnit = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional string weight_unit = 17;
 * @return {string}
 */
proto.matching.Item.prototype.getWeightUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.matching.Item.prototype.setWeightUnit = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional string image = 18;
 * @return {string}
 */
proto.matching.Item.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.matching.Item.prototype.setImage = function(value) {
  jspb.Message.setField(this, 18, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.matching.TravelPlanMatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.matching.TravelPlanMatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.matching.TravelPlanMatch.displayName = 'proto.matching.TravelPlanMatch';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.matching.TravelPlanMatch.prototype.toObject = function(opt_includeInstance) {
  return proto.matching.TravelPlanMatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.matching.TravelPlanMatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matching.TravelPlanMatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dealAmount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dealTimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    handoverTimestamp1: jspb.Message.getFieldWithDefault(msg, 5, 0),
    handoverTimestamp2: jspb.Message.getFieldWithDefault(msg, 6, 0),
    nonOwner: jspb.Message.getFieldWithDefault(msg, 7, ""),
    otp1: jspb.Message.getFieldWithDefault(msg, 8, ""),
    otp2: jspb.Message.getFieldWithDefault(msg, 9, ""),
    request: jspb.Message.getFieldWithDefault(msg, 10, 0),
    status: jspb.Message.getFieldWithDefault(msg, 11, ""),
    statusInternal: jspb.Message.getFieldWithDefault(msg, 12, 0),
    startTime: jspb.Message.getFieldWithDefault(msg, 13, 0),
    item: (f = msg.getItem()) && proto.matching.Item.toObject(includeInstance, f),
    sender: (f = msg.getSender()) && proto.matching.PartUserData.toObject(includeInstance, f),
    receiver: (f = msg.getReceiver()) && proto.matching.PartUserData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.matching.TravelPlanMatch}
 */
proto.matching.TravelPlanMatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.matching.TravelPlanMatch;
  return proto.matching.TravelPlanMatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.matching.TravelPlanMatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.matching.TravelPlanMatch}
 */
proto.matching.TravelPlanMatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDealAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDealTimestamp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHandoverTimestamp1(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHandoverTimestamp2(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonOwner(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtp1(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtp2(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequest(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatusInternal(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 14:
      var value = new proto.matching.Item;
      reader.readMessage(value,proto.matching.Item.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    case 15:
      var value = new proto.matching.PartUserData;
      reader.readMessage(value,proto.matching.PartUserData.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 16:
      var value = new proto.matching.PartUserData;
      reader.readMessage(value,proto.matching.PartUserData.deserializeBinaryFromReader);
      msg.setReceiver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.matching.TravelPlanMatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.matching.TravelPlanMatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.matching.TravelPlanMatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matching.TravelPlanMatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDealAmount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDealTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getHandoverTimestamp1();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getHandoverTimestamp2();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getNonOwner();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOtp1();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getOtp2();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getRequest();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getStatusInternal();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.matching.Item.serializeBinaryToWriter
    );
  }
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.matching.PartUserData.serializeBinaryToWriter
    );
  }
  f = message.getReceiver();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.matching.PartUserData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.matching.TravelPlanMatch.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.matching.TravelPlanMatch.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 deal_amount = 2;
 * @return {number}
 */
proto.matching.TravelPlanMatch.prototype.getDealAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.matching.TravelPlanMatch.prototype.setDealAmount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 deal_timestamp = 3;
 * @return {number}
 */
proto.matching.TravelPlanMatch.prototype.getDealTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.matching.TravelPlanMatch.prototype.setDealTimestamp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 end_time = 4;
 * @return {number}
 */
proto.matching.TravelPlanMatch.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.matching.TravelPlanMatch.prototype.setEndTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 handover_timestamp_1 = 5;
 * @return {number}
 */
proto.matching.TravelPlanMatch.prototype.getHandoverTimestamp1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.matching.TravelPlanMatch.prototype.setHandoverTimestamp1 = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 handover_timestamp_2 = 6;
 * @return {number}
 */
proto.matching.TravelPlanMatch.prototype.getHandoverTimestamp2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.matching.TravelPlanMatch.prototype.setHandoverTimestamp2 = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string non_owner = 7;
 * @return {string}
 */
proto.matching.TravelPlanMatch.prototype.getNonOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.matching.TravelPlanMatch.prototype.setNonOwner = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string otp_1 = 8;
 * @return {string}
 */
proto.matching.TravelPlanMatch.prototype.getOtp1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.matching.TravelPlanMatch.prototype.setOtp1 = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string otp_2 = 9;
 * @return {string}
 */
proto.matching.TravelPlanMatch.prototype.getOtp2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.matching.TravelPlanMatch.prototype.setOtp2 = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional int32 request = 10;
 * @return {number}
 */
proto.matching.TravelPlanMatch.prototype.getRequest = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.matching.TravelPlanMatch.prototype.setRequest = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string status = 11;
 * @return {string}
 */
proto.matching.TravelPlanMatch.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.matching.TravelPlanMatch.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional int32 status_internal = 12;
 * @return {number}
 */
proto.matching.TravelPlanMatch.prototype.getStatusInternal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.matching.TravelPlanMatch.prototype.setStatusInternal = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional int64 start_time = 13;
 * @return {number}
 */
proto.matching.TravelPlanMatch.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.matching.TravelPlanMatch.prototype.setStartTime = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional Item item = 14;
 * @return {?proto.matching.Item}
 */
proto.matching.TravelPlanMatch.prototype.getItem = function() {
  return /** @type{?proto.matching.Item} */ (
    jspb.Message.getWrapperField(this, proto.matching.Item, 14));
};


/** @param {?proto.matching.Item|undefined} value */
proto.matching.TravelPlanMatch.prototype.setItem = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.matching.TravelPlanMatch.prototype.clearItem = function() {
  this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.matching.TravelPlanMatch.prototype.hasItem = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional PartUserData sender = 15;
 * @return {?proto.matching.PartUserData}
 */
proto.matching.TravelPlanMatch.prototype.getSender = function() {
  return /** @type{?proto.matching.PartUserData} */ (
    jspb.Message.getWrapperField(this, proto.matching.PartUserData, 15));
};


/** @param {?proto.matching.PartUserData|undefined} value */
proto.matching.TravelPlanMatch.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.matching.TravelPlanMatch.prototype.clearSender = function() {
  this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.matching.TravelPlanMatch.prototype.hasSender = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional PartUserData receiver = 16;
 * @return {?proto.matching.PartUserData}
 */
proto.matching.TravelPlanMatch.prototype.getReceiver = function() {
  return /** @type{?proto.matching.PartUserData} */ (
    jspb.Message.getWrapperField(this, proto.matching.PartUserData, 16));
};


/** @param {?proto.matching.PartUserData|undefined} value */
proto.matching.TravelPlanMatch.prototype.setReceiver = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.matching.TravelPlanMatch.prototype.clearReceiver = function() {
  this.setReceiver(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.matching.TravelPlanMatch.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 16) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.matching.PartUserData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.matching.PartUserData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.matching.PartUserData.displayName = 'proto.matching.PartUserData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.matching.PartUserData.prototype.toObject = function(opt_includeInstance) {
  return proto.matching.PartUserData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.matching.PartUserData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matching.PartUserData.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    image: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    osToken: jspb.Message.getFieldWithDefault(msg, 4, ""),
    rating: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    recommendations: jspb.Message.getFieldWithDefault(msg, 6, 0),
    trustFactor: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.matching.PartUserData}
 */
proto.matching.PartUserData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.matching.PartUserData;
  return proto.matching.PartUserData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.matching.PartUserData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.matching.PartUserData}
 */
proto.matching.PartUserData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOsToken(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRating(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRecommendations(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTrustFactor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.matching.PartUserData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.matching.PartUserData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.matching.PartUserData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matching.PartUserData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOsToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRating();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getRecommendations();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getTrustFactor();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.matching.PartUserData.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.matching.PartUserData.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string image = 2;
 * @return {string}
 */
proto.matching.PartUserData.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.matching.PartUserData.prototype.setImage = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.matching.PartUserData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.matching.PartUserData.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string os_token = 4;
 * @return {string}
 */
proto.matching.PartUserData.prototype.getOsToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.matching.PartUserData.prototype.setOsToken = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double rating = 5;
 * @return {number}
 */
proto.matching.PartUserData.prototype.getRating = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.matching.PartUserData.prototype.setRating = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 recommendations = 6;
 * @return {number}
 */
proto.matching.PartUserData.prototype.getRecommendations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.matching.PartUserData.prototype.setRecommendations = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 trust_factor = 7;
 * @return {number}
 */
proto.matching.PartUserData.prototype.getTrustFactor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.matching.PartUserData.prototype.setTrustFactor = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.matching.TravelPlan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.matching.TravelPlan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.matching.TravelPlan.displayName = 'proto.matching.TravelPlan';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.matching.TravelPlan.prototype.toObject = function(opt_includeInstance) {
  return proto.matching.TravelPlan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.matching.TravelPlan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matching.TravelPlan.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startLat: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    startLon: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    endLat: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    endLon: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    startAddr: jspb.Message.getFieldWithDefault(msg, 6, ""),
    endAddr: jspb.Message.getFieldWithDefault(msg, 7, ""),
    startTime: jspb.Message.getFieldWithDefault(msg, 8, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.matching.TravelPlan}
 */
proto.matching.TravelPlan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.matching.TravelPlan;
  return proto.matching.TravelPlan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.matching.TravelPlan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.matching.TravelPlan}
 */
proto.matching.TravelPlan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartLat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartLon(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndLat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndLon(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartAddr(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndAddr(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.matching.TravelPlan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.matching.TravelPlan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.matching.TravelPlan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matching.TravelPlan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartLat();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getStartLon();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getEndLat();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getEndLon();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getStartAddr();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEndAddr();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.matching.TravelPlan.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.matching.TravelPlan.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double start_lat = 2;
 * @return {number}
 */
proto.matching.TravelPlan.prototype.getStartLat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.matching.TravelPlan.prototype.setStartLat = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional double start_lon = 3;
 * @return {number}
 */
proto.matching.TravelPlan.prototype.getStartLon = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.matching.TravelPlan.prototype.setStartLon = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional double end_lat = 4;
 * @return {number}
 */
proto.matching.TravelPlan.prototype.getEndLat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.matching.TravelPlan.prototype.setEndLat = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double end_lon = 5;
 * @return {number}
 */
proto.matching.TravelPlan.prototype.getEndLon = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.matching.TravelPlan.prototype.setEndLon = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string start_addr = 6;
 * @return {string}
 */
proto.matching.TravelPlan.prototype.getStartAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.matching.TravelPlan.prototype.setStartAddr = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string end_addr = 7;
 * @return {string}
 */
proto.matching.TravelPlan.prototype.getEndAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.matching.TravelPlan.prototype.setEndAddr = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int64 start_time = 8;
 * @return {number}
 */
proto.matching.TravelPlan.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.matching.TravelPlan.prototype.setStartTime = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int64 end_time = 9;
 * @return {number}
 */
proto.matching.TravelPlan.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.matching.TravelPlan.prototype.setEndTime = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.matching.ItemMatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.matching.ItemMatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.matching.ItemMatch.displayName = 'proto.matching.ItemMatch';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.matching.ItemMatch.prototype.toObject = function(opt_includeInstance) {
  return proto.matching.ItemMatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.matching.ItemMatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matching.ItemMatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dealAmount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dealTimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    handoverTimestamp1: jspb.Message.getFieldWithDefault(msg, 5, 0),
    handoverTimestamp2: jspb.Message.getFieldWithDefault(msg, 6, 0),
    nonOwner: jspb.Message.getFieldWithDefault(msg, 7, ""),
    otp1: jspb.Message.getFieldWithDefault(msg, 8, ""),
    otp2: jspb.Message.getFieldWithDefault(msg, 9, ""),
    request: jspb.Message.getFieldWithDefault(msg, 10, 0),
    status: jspb.Message.getFieldWithDefault(msg, 11, ""),
    statusInternal: jspb.Message.getFieldWithDefault(msg, 12, 0),
    travelplan: (f = msg.getTravelplan()) && proto.matching.TravelPlan.toObject(includeInstance, f),
    traveller: (f = msg.getTraveller()) && proto.matching.PartUserData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.matching.ItemMatch}
 */
proto.matching.ItemMatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.matching.ItemMatch;
  return proto.matching.ItemMatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.matching.ItemMatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.matching.ItemMatch}
 */
proto.matching.ItemMatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDealAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDealTimestamp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHandoverTimestamp1(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHandoverTimestamp2(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonOwner(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtp1(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtp2(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequest(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatusInternal(value);
      break;
    case 13:
      var value = new proto.matching.TravelPlan;
      reader.readMessage(value,proto.matching.TravelPlan.deserializeBinaryFromReader);
      msg.setTravelplan(value);
      break;
    case 14:
      var value = new proto.matching.PartUserData;
      reader.readMessage(value,proto.matching.PartUserData.deserializeBinaryFromReader);
      msg.setTraveller(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.matching.ItemMatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.matching.ItemMatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.matching.ItemMatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matching.ItemMatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDealAmount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDealTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getHandoverTimestamp1();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getHandoverTimestamp2();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getNonOwner();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOtp1();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getOtp2();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getRequest();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getStatusInternal();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getTravelplan();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.matching.TravelPlan.serializeBinaryToWriter
    );
  }
  f = message.getTraveller();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.matching.PartUserData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.matching.ItemMatch.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.matching.ItemMatch.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 deal_amount = 2;
 * @return {number}
 */
proto.matching.ItemMatch.prototype.getDealAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.matching.ItemMatch.prototype.setDealAmount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 deal_timestamp = 3;
 * @return {number}
 */
proto.matching.ItemMatch.prototype.getDealTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.matching.ItemMatch.prototype.setDealTimestamp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 end_time = 4;
 * @return {number}
 */
proto.matching.ItemMatch.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.matching.ItemMatch.prototype.setEndTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 handover_timestamp_1 = 5;
 * @return {number}
 */
proto.matching.ItemMatch.prototype.getHandoverTimestamp1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.matching.ItemMatch.prototype.setHandoverTimestamp1 = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 handover_timestamp_2 = 6;
 * @return {number}
 */
proto.matching.ItemMatch.prototype.getHandoverTimestamp2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.matching.ItemMatch.prototype.setHandoverTimestamp2 = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string non_owner = 7;
 * @return {string}
 */
proto.matching.ItemMatch.prototype.getNonOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.matching.ItemMatch.prototype.setNonOwner = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string otp_1 = 8;
 * @return {string}
 */
proto.matching.ItemMatch.prototype.getOtp1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.matching.ItemMatch.prototype.setOtp1 = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string otp_2 = 9;
 * @return {string}
 */
proto.matching.ItemMatch.prototype.getOtp2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.matching.ItemMatch.prototype.setOtp2 = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional int32 request = 10;
 * @return {number}
 */
proto.matching.ItemMatch.prototype.getRequest = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.matching.ItemMatch.prototype.setRequest = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string status = 11;
 * @return {string}
 */
proto.matching.ItemMatch.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.matching.ItemMatch.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional int32 status_internal = 12;
 * @return {number}
 */
proto.matching.ItemMatch.prototype.getStatusInternal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.matching.ItemMatch.prototype.setStatusInternal = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional TravelPlan travelplan = 13;
 * @return {?proto.matching.TravelPlan}
 */
proto.matching.ItemMatch.prototype.getTravelplan = function() {
  return /** @type{?proto.matching.TravelPlan} */ (
    jspb.Message.getWrapperField(this, proto.matching.TravelPlan, 13));
};


/** @param {?proto.matching.TravelPlan|undefined} value */
proto.matching.ItemMatch.prototype.setTravelplan = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.matching.ItemMatch.prototype.clearTravelplan = function() {
  this.setTravelplan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.matching.ItemMatch.prototype.hasTravelplan = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional PartUserData traveller = 14;
 * @return {?proto.matching.PartUserData}
 */
proto.matching.ItemMatch.prototype.getTraveller = function() {
  return /** @type{?proto.matching.PartUserData} */ (
    jspb.Message.getWrapperField(this, proto.matching.PartUserData, 14));
};


/** @param {?proto.matching.PartUserData|undefined} value */
proto.matching.ItemMatch.prototype.setTraveller = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.matching.ItemMatch.prototype.clearTraveller = function() {
  this.setTraveller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.matching.ItemMatch.prototype.hasTraveller = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.matching.MatchesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.matching.MatchesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.matching.MatchesRequest.displayName = 'proto.matching.MatchesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.matching.MatchesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.matching.MatchesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.matching.MatchesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matching.MatchesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    queryUserId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    startLat: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    startLon: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    endLat: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    endLon: +jspb.Message.getFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.matching.MatchesRequest}
 */
proto.matching.MatchesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.matching.MatchesRequest;
  return proto.matching.MatchesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.matching.MatchesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.matching.MatchesRequest}
 */
proto.matching.MatchesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueryUserId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartLat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartLon(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndLat(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndLon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.matching.MatchesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.matching.MatchesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.matching.MatchesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matching.MatchesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQueryUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStartLat();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getStartLon();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getEndLat();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getEndLon();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.matching.MatchesRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.matching.MatchesRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string query_user_id = 2;
 * @return {string}
 */
proto.matching.MatchesRequest.prototype.getQueryUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.matching.MatchesRequest.prototype.setQueryUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional double start_lat = 3;
 * @return {number}
 */
proto.matching.MatchesRequest.prototype.getStartLat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.matching.MatchesRequest.prototype.setStartLat = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional double start_lon = 4;
 * @return {number}
 */
proto.matching.MatchesRequest.prototype.getStartLon = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.matching.MatchesRequest.prototype.setStartLon = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double end_lat = 5;
 * @return {number}
 */
proto.matching.MatchesRequest.prototype.getEndLat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.matching.MatchesRequest.prototype.setEndLat = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional double end_lon = 6;
 * @return {number}
 */
proto.matching.MatchesRequest.prototype.getEndLon = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.matching.MatchesRequest.prototype.setEndLon = function(value) {
  jspb.Message.setField(this, 6, value);
};


goog.object.extend(exports, proto.matching);
